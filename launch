#!/bin/bash
# Praxis Launch Script - Simple wrapper for virtual environment management

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Check if first argument is 'compose' for Docker Compose execution
# We short-circuit, if using Docker, to re-run the script within our container
if [ "$1" = "compose" ]; then
    shift  # Remove 'compose' from arguments

    echo "[DOCKER] Starting Praxis in Docker Compose environment..."

    # Run in Docker Compose with all remaining arguments
    # Include port publishing for API server access
    docker compose -f "$SCRIPT_DIR/compose.yml" run --rm -it --service-ports agent ./launch "$@"
    exit $?
fi

# Check if we're running inside a Docker container
if [ -f /.dockerenv ] || [ -n "${CONTAINER:-}" ]; then
    echo "[DOCKER] Running inside container..."

    # Ensure .venv directory exists and is writable
    mkdir -p "$SCRIPT_DIR/.venv"
fi

# Ensure we have a functional virtual environment and activate it
if [ ! -f "$SCRIPT_DIR/.venv/bin/activate" ]; then
    echo "Creating virtual environment..."
    python3 -m venv "$SCRIPT_DIR/.venv"
fi

echo "[SYSTEM] Activated virtual environment."
. "$SCRIPT_DIR/.venv/bin/activate"

# Install praxis package if not already installed
if [ -f "$SCRIPT_DIR/pyproject.toml" ]; then
    if ! python -c "import praxis" 2>/dev/null; then
        echo "[ENV] Installing Praxis in development mode..."
        pip install -e "$SCRIPT_DIR"
        echo "[ENV] Praxis installation complete"
    else
        echo "[ENV] Praxis is installed."
    fi
fi

# Pass all arguments directly to main.py
python "$SCRIPT_DIR/main.py" "$@"
EXIT_CODE=$?

# Deactivate the virtual environment and exit with the command's exit code
deactivate
exit $EXIT_CODE