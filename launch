#!/bin/bash
# Praxis Launch Script - Simple router for Praxis commands

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Ensure we have a virtual environment and activate it
if [ ! -d "$SCRIPT_DIR/.venv" ]; then
    echo "Creating virtual environment..."
    python3 -m venv "$SCRIPT_DIR/.venv"
fi

echo "[INFO] Activated virtual environment."

# Always activate the venv (we'll deactivate at the end)
. "$SCRIPT_DIR/.venv/bin/activate"

# Install praxis package if not already installed
# The pyproject.toml should always exist in the project root
if [ -f "$SCRIPT_DIR/pyproject.toml" ]; then
    # Quick check if praxis is installed
    if ! python -c "import praxis" 2>/dev/null; then
        echo "[INFO] Installing Praxis in development mode..."
        pip install -e "$SCRIPT_DIR" --quiet
        echo "[INFO] Praxis installation complete"
    else
        echo "[INFO] Praxis is installed."
    fi
fi

# Check if any arguments were provided
if [ $# -eq 0 ]; then
    # No arguments - run the default training script
    python "$SCRIPT_DIR/main.py"
    deactivate
    exit $?
fi

# Parse the first argument as the command
COMMAND="$1"
shift  # Remove the first argument

# Route based on command
case "$COMMAND" in
    tokenizer|tokenizers|train-tokenizer)
        # Tokenizer training
        python -m praxis.tokenizers.train "$@"
        EXIT_CODE=$?
        ;;
    
    archivist|archive)
        # Archivist tool
        python "$SCRIPT_DIR/archivist.py" "$@"
        EXIT_CODE=$?
        ;;
    
    run|train)
        # Explicit training command
        python "$SCRIPT_DIR/main.py" "$@"
        EXIT_CODE=$?
        ;;
    
    --help|-h|help)
        # First show main.py help
        python "$SCRIPT_DIR/main.py" --help
        
        # Then append launcher-specific commands
        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        echo "launcher commands:"
        echo "  tokenizer               Train or manage tokenizers"
        echo "  archivist               Run the archivist tool"
        echo ""
        echo "launcher examples:"
        echo "  ./launch tokenizer --help   # Show tokenizer options"
        echo "  ./launch archivist --help   # Show archivist options"
        EXIT_CODE=0
        ;;
    
    *)
        # Unknown command - pass all args to main.py
        # This allows "./launch --dev" to work
        python "$SCRIPT_DIR/main.py" "$COMMAND" "$@"
        EXIT_CODE=$?
        ;;
esac

# Deactivate the virtual environment and exit with the command's exit code
deactivate
exit $EXIT_CODE